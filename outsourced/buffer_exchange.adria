
var Listenable = require('astd/listenable');
var Buffer = require('./buffer');

var bexIdentifier = 2504718562;
var bexInstanceId = 0;

/**
 * BufferExchange
 *
 * allows asynchronous communication between two worker-processes
 * via two zero-copy buffer-exchange
 *
 * @event data(Buffer buffer, finite sourceId) emitted on buffer reception, sourceId is the original id returned by ready()
 */
module BufferExchange = proto (Listenable) {

    /**
     * @var integer id uniquely identifying a SharedMemory instance
     */
    protected instanceId: 0,

    /**
     * @var Worker worker to communicate with
     */
    protected other: null,

    /**
     * @var Array of Buffer transfer buffers
     */
    protected buffers: null,

    /**
     * @var integer number of available buffer slots
     */
    protected numSlotsAvailable: 0,

    /**
     * @var integer current buffer target to write to
     */
    protected writeBuffer: 0,

    /**
     * @var func bound receive function
     */
    private receiveHandler: null,

    /**
     * construct new instance
     *
     * @param object other worker to use as other endpoint
     * @param integer buffersize
     * @param integer numBuffers number of buffers
     */
    public constructor: func(object other, finite buffersize = 1024 * 1024, finite numBuffers = 2) {

        this.other = other;
        this.instanceId = bexInstanceId++;

        // reserve space for twice as many buffers to be able to handle situations where all
        // buffers are on one side of the channel at the same time

        this.buffers = new Array(numBuffers * 2);
        this.bufferStates = new Array(numBuffers * 2);
        this.numSlotsAvailable = numBuffers;

        // create local buffers, flag non-locals as busy

        for (var i = 0; i < numBuffers; i++) {
            this.buffers[i] = new Buffer(this, buffersize);
            this.buffers[i + numBuffers] = new Buffer(this, null);
        }

        this.receiveHandler = this.receive.bind(this);
        this.other.addEventListener('message', this.receiveHandler, false);
    },

    /**
     * should be called when done
     */
    public destroy: func() {
        this.other.removeEventListener('message', this.receiveHandler, false);
    },

    /**
     * returns ArrayBuffer suitable for writing
     */
    public getWriteBuffer: func() {

        if (this.writeBuffer < 0) {
            return null;
        }

        return this.buffers[this.writeBuffer];
    },

    /**
     * call when current writebuffer can be sent
     *
     * @return finite buffer id
     */
    public ready: func() {

        var bufferId = this.writeBuffer;
        var buffer = this.buffers[bufferId];

        buffer.release();

        // check number of slots available on remote before sending

        if (this.buffers.length - this.numSlotsAvailable > 1) {
            buffer.send(bufferId);
        }

        this.updateWriteSlot();
        return bufferId;
    },

    /**
     * message receiver
     *
     * @param event postMessage event
     */
    protected receive: func(event) {

        var data = event.data;

        // verify the message is actually a buffer exchange

        if (data instanceof Object !== true || data.bexInstance !== this.instanceId || data.bexIdentifier !== bexIdentifier) {
            return;
        }

        // find slot to place the data in

        var numSlots = this.buffers.length;

        for (var i = 0; i < numSlots; i++) {
            if (this.buffers[i].canReceive) {

                this.buffers[i].receive(data.bexBuffer);
                this.numSlotsAvailable--;
                this.execute('data', this.buffers[i], data.bexSourceId);
                return;
            }
        }

        throw new Exception('Excess buffer received.');
    },

    /**
     * finds a buffer slot ready for writing
     *
     * @return integer
     */
    protected updateWriteSlot: func() {

        var numSlots = this.buffers.length;

        for (var i = 0; i < numSlots; i++) {
            if (this.buffers[i].canWrite) {
                this.writeBuffer = i;
                return;
            }
        }

        this.writeBuffer = -1;
    },

    /**
     * sends the buffer to the receiving worker
     */
    public send: func(ArrayBuffer data, finite sourceId) {

        var container = {
            bexIdentifier   : bexIdentifier,
            bexInstance     : this.instanceId,
            bexBuffer       : data,
            bexSourceId     : sourceId,
        };

        this.other.postMessage(container, [ container.bexBuffer ]);
        this.numSlotsAvailable++;
    },
};
