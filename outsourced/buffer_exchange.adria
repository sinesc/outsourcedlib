/*
 * Outsourced WebWorker Communication Library
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Listenable = require('astd/listenable');
var Buffer = require('./buffer');

var bexIdentifier = 2504718562;
var bexInstanceId = 0;

/**
 * BufferExchange
 *
 * allows asynchronous communication between two worker-processes
 * via two zero-copy buffer-exchange
 *
 * @event data(Buffer buffer, finite sourceId) emitted on buffer reception, sourceId is the original id returned by ready()
 */
module BufferExchange = proto (Listenable) {

    /**
     * @var integer id uniquely identifying a SharedMemory instance
     */
    protected instanceId: 0,

    /**
     * @var Worker worker to communicate with
     */
    protected other: null,

    /**
     * @var Array of Buffer transfer buffers
     */
    protected buffers: null,

    /**
     * @var integer number of available buffer slots
     */
    protected numSlotsAvailable: 0,

    /**
     * @var func bound receive function
     */
    private receiveHandler: null,

    /**
     * construct new instance
     *
     * @param object other worker to use as other endpoint
     * @param integer buffersize
     * @param integer numBuffers number of buffers
     */
    public constructor: func(object other, finite buffersize = 1024 * 1024, finite numBuffers = 4) {

        this.other = other;
        this.instanceId = bexInstanceId++;

        // reserve space for twice as many buffers to be able to handle situations where all
        // buffers are on one side of the channel at the same time

        this.buffers = new Array(numBuffers * 2);
        this.numSlotsAvailable = numBuffers;

        // create local buffers, flag non-locals as busy

        for (var i = 0; i < numBuffers; i++) {
            this.buffers[i] = new Buffer(buffersize);
            this.buffers[i].on('outgoing', this, this.onBufferOutgoing);
            this.buffers[i + numBuffers] = new Buffer(null);
            this.buffers[i + numBuffers].on('outgoing', this, this.onBufferOutgoing);
        }

        this.receiveHandler = this.onMessageReceived.bind(this);
        this.other.addEventListener('message', this.receiveHandler, false);
    },

    /**
     * should be called when done
     */
    public destroy: func() {
        this.other.removeEventListener('message', this.receiveHandler, false);
    },

    /**
     * returns ArrayBuffer suitable for writing
     */
    public getWriteBuffer: func() {

        var numSlots = this.buffers.length;

        for (var i = 0; i < numSlots; i++) {
            var buffer = this.buffers[i];

            if (buffer.state === Buffer::STATE_AVAILABLE) {
                buffer.setReserved();
                return buffer;
            }
        }

        return null;
    },

    /**
     * attempt to immediately send outgoing buffers
     *
     * @param Buffer buffer
     */
    public onBufferOutgoing: func(Buffer buffer) {

        // check number of slots available on remote before sending

        if (this.buffers.length - this.numSlotsAvailable >= 1) {
            this.send(buffer);
        }
    },

    /**
     * invoked when a valid buffer was received
     *
     * @param ArrayBuffer data
     */
    protected onDataReceived: func(ArrayBuffer data) {

        var numSlots = this.buffers.length;
        var freeSlot = -1;

        // flush potentially lingering outgoing buffer and find slot to place the data in

        for (var i = 0; i < numSlots; i++) {
            var buffer = this.buffers[i];

            if (buffer.state === Buffer::STATE_NOT_AVAILABLE) {
                freeSlot = i;
            } else if (buffer.state === Buffer::STATE_OUTGOING) {
                this.send(buffer);
                freeSlot = i;
            }
        }

        // store received data to buffer

        if (freeSlot > -1) {
            this.buffers[freeSlot].setReceived(data);
            this.numSlotsAvailable--;
            this.execute('data', this.buffers[freeSlot], data);
        } else {
            throw new Exception('Excess buffer received.');
        }
    },

    /**
     * sends the buffer to the receiving worker
     */
    protected send: func(Buffer buffer) {

        var data = buffer.setSent();

        var container = {
            bexIdentifier   : bexIdentifier,
            bexInstance     : this.instanceId,
            bexBuffer       : data,
            bexSourceId     : 0, //!todo
        };

        this.other.postMessage(container, [ container.bexBuffer ]);
        this.numSlotsAvailable++;
    },

    /**
     * message receiver, validates message is a BufferExchange message and invokes onDataReceived
     *
     * @param event postMessage event
     */
    public onMessageReceived: func(event) {

        var data = event.data;

        // verify the message is actually a buffer exchange

        if (data instanceof Object !== true || data.bexInstance !== this.instanceId || data.bexIdentifier !== bexIdentifier) {
            return;
        }

        this.onDataReceived(data.bexBuffer);
    },
};
