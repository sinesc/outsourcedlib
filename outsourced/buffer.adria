
var Listenable = require('astd/listenable');

/**
 * Buffer
 *
 * @event release(Buffer buffer) emitted on buffer release
 */
module Buffer = proto (Listenable) {

    /*
     * ... -> received -> available* -> reserved -> outgoing -> not-available -> ...
     *              release()   setReserved() release()   setSent()       setReceived()
     */
    public STATE_RECEIVED: 15,
    public STATE_AVAILABLE: 16,
    public STATE_RESERVED: 17,
    public STATE_OUTGOING: 18,
    public STATE_NOT_AVAILABLE: 19,

    public data: null,

    public state: prop {
        get: func() {
            return storage;
        },
        set: func(value) {      //!todo prot
            storage = value;
        }
    },

    public constructor: func(finite? buffersize = null) {
        this.state = buffersize === null ? this.STATE_NOT_AVAILABLE : this.STATE_AVAILABLE;
        this.data = buffersize === null ? null : new ArrayBuffer(buffersize);
    },

    /**
     * release buffer. a received buffer will become available for writing, a reserved buffer will
     * be marked as outgoing
     */
    public release: func() {

        if (this.state === this.STATE_RECEIVED) {

            this.state = this.STATE_AVAILABLE;
            this.execute('available', this);
            return;

        } else if (this.state === this.STATE_RESERVED) {

            this.state = this.STATE_OUTGOING;
            this.execute('outgoing', this);
            return;
        }

        throw new Exception('Cannot release buffer in its current state');
    },

    /**
     * marks buffer as reserved and returns internal ArrayBuffer
     */
    public setReserved: func() {

        if (this.state !== this.STATE_AVAILABLE) {
            throw new Exception('Cannot reserve buffer in its current state');
        }

        this.state = this.STATE_RESERVED;
        return this.data;
    },

    /**
     * marks buffer as sent and returns internal ArrayBuffer
     */
    public setSent: func() {

        if (this.state !== this.STATE_OUTGOING) {
            throw new Exception('Cannot send buffer in its current state');
        }

        this.state = this.STATE_NOT_AVAILABLE;
        return this.data;
    },

    /**
     * marks buffer as sent and returns internal ArrayBuffer
     */
    public setReceived: func(ArrayBuffer data) {

        if (this.state !== this.STATE_NOT_AVAILABLE) {
            throw new Exception('Cannot receive buffer in current state');
        }

        this.state = this.STATE_RECEIVED;
        this.data = data;
    },
};
