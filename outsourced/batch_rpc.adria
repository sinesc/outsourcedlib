/*
 * Outsourced WebWorker Communication Library
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var NAME = 0;
var ARGS = 1;
var INSTANCE = 2;
var ENDPOINT = 3;

/**
 * BatchRPC
 *
 * High-performance binary procedure call serializer suitable for use with
 * zero-copy buffer-exchange
 *
 * BatchRPC subclasses need to be initialized once by
 * SubClass::setupEndPoint() in order to compile optimized serializers
 * for the procedures defined in SubClass::procedures.
 */
module BatchRPC = proto {

    /**
     * parameter types
     */
    public P_FLOAT : 91,
    public P_INT : 92,
    public P_STR : 93,

    /**
     * array of procedures supported by the command channel
     * required implementation
     */
    protected procedures: null,

    /**
     * size of the channel in integers (32 bit)
     */
    protected size: 32 * 1024,

    /**
     * write- and read-functions created by setupEndPoint
     */
    protected writeChannel: null,
    protected readChannel: null,

    /**
     * target instance to use for method call if no handler is defined in BatchRPC subclass
     */
    protected targetInstance: null,

    /**
     * internal: int/float32 arrays on storage buffer
     */
    protected iReadArray: null,
    protected fReadArray: null,
    protected iWriteArray: null,
    protected fWriteArray: null,

    /**
     * internal: current read/write position in channel
     */
    protected readPosition: 1,
    protected writePosition: 1,

    /**
     * internal: command->id
     */
    protected _cmdToId: null,

    /**
     * instance constructor
     *
     * @param object targetInstance optional instance to run procedures on
     */
    public constructor: func(Object? targetInstance = null) {

        assert(
            this._cmdToId instanceof Object && this.writeChannel instanceof Object && this.readChannel instanceof Object,
            'end-point setup required before instances can be constructed'
        );

        this.targetInstance = targetInstance;
    },

    /**
     * initialize command channel endpoint. must be called on the prototype
     *
     * @param string endPointName name of the local end-point (where procedures of this endpoint-type are called to be executed on the other endpoint)
     * @param boolean createWrapper create read/write wrapper functions on this prototype
     */
    public setupEndPoint: func(string endPointName, boolean createWrapper = true) {

        assert(this.prototype == undefined, 'must be called on a prototype');

        var id, name;

        this._cmdToId = { };
        this.writeChannel = { };
        this.readChannel = { };

        for (var index in this.procedures) {

            // [ methodName<0>, [ parameters ]<1><n>, instanceName<2>, endPointName<3> ],

            var command = this.procedures[index];
            command[INSTANCE] = command.length < 3 ? null : command[INSTANCE];
            command[ENDPOINT] = command.length < 4 ? null : command[ENDPOINT];

            assert(command instanceof Array);
            assert(typeof command[NAME] == 'string');
            assert(command[ARGS] instanceof Array);
            assert(command[INSTANCE] == null || typeof command[INSTANCE] == 'string');
            assert(command[ENDPOINT] == null || typeof command[ENDPOINT] == 'string');

            // build command<->id maps

            id = parseInt(index) +1;
            name = (command[INSTANCE] != null ? command[INSTANCE] + '$' : '') + command[NAME];

            this._cmdToId[name] = id;

            // compile procedure-specific read/write functions

            if ((command[INSTANCE] == null && this[command[NAME]] == undefined) || command[ENDPOINT] == endPointName) {
                createWriter(this, command[INSTANCE], command[NAME], command[ARGS], createWrapper);
            } else {
                createReader(this, command[INSTANCE], command[NAME], command[ARGS], createWrapper, id);
            }
        }
    },

    /**
     * run all procedures in given buffer and reset it
     *
     * @param ArrayBuffer buffer
     * @param integer byteOffset
     */
    public readBuffer: func(ArrayBuffer buffer, finite byteOffset = 0) {

        this.iReadArray = new Int32Array(buffer, byteOffset, this.size * 4);
        this.fReadArray = new Float32Array(buffer, byteOffset, this.size * 4);
        this.readPosition = 1;

        var iReadArray = this.iReadArray;
        var readChannel = this.readChannel;
        //var target = this.targetInstance; // !todo targetInstance might be changed by channelfunctions, remove parameter, have gen. code use this.targetInstance
        var length = this.inputLength;
        var cmdId;

        // perform all procedures in channel

        for (var i = 0; i < length; ++i) {
            cmdId = iReadArray[this.readPosition++];
            readChannel[cmdId](this, this.targetInstance);
        }

        // reset channel command count to 0

        iReadArray[0] = 0;
    },

    /**
     * sets write buffer
     *
     * @param ArrayBuffer buffer
     * @param integer byteOffset offset in bytes into the buffer
     */
    public writeBuffer: func(ArrayBuffer buffer, finite byteOffset = 0) {

        this.iWriteArray = new Int32Array(buffer, byteOffset, this.size * 4);
        this.fWriteArray = new Float32Array(buffer, byteOffset, this.size * 4);
        this.writePosition = 1;
        this.iWriteArray[0] = 0;
    },

    /**
     * returns the required size for a buffer to host this channel
     */
    public requiredBufferSize: prop {
        get: func() {
            return this.size * 4;
        }
    },

    /**
     * sets or returns current number of procedures stored in input data
     */
    public inputLength: prop {
        get: func() {
            assert(this.iReadArray instanceof Int32Array);
            return this.iReadArray[0];
        },
        set: func(value) {
            assert(this.iReadArray instanceof Int32Array);
            this.iReadArray[0] = value;
        }
    },

    /**
     * sets or returns current number of procedures stored in output data
     */
    public outputLength: prop {
        get: func() {
            assert(this.iWriteArray instanceof Int32Array);
            return this.iWriteArray[0];
        },
        set: func(value) {
            assert(this.iWriteArray instanceof Int32Array);
            this.iWriteArray[0] = value;
        }
    },

};

/**
 * checks whether given type of parameter is used in parameterlist
 *
 * @param test parameter type to look for
 * @param args parameterlist
 * @return bool
 */
var uses = func(test, args) {

    for (var index in args) {

        if (args[index] == test) {
            return true;
        }
    }

    return false;
};

/**
 * return sourceURL string
 * oddly, at least in chrome, this requires a hostname to show up along with sourcemapped files (which don't require a hostname)
 *
 * @param string root folder
 * @param Function constructor used for subfolder name
 * @param string name used for file name
 */
var getSourceUrl = func(root, constructor, name) {

    var baseUri = typeof location == 'object' && typeof location.origin == 'string' ? location.origin : 'http://localhost';
    return '//# sourceURL=' + baseUri + '/rpc/' + root + '/' + constructor.name + '/' + name + '.js';
};

/**
 * private: creates a function used to write a specific command to the channel
 *
 * @param BatchRPC channel
 * @param string instanceName
 * @param string name function name
 * @param Array args function argument type array
 * @param boolean createWrapper if true and it doesn't already exist, a basic wrapper function is created in the BatchRPC, calling the created function
 */
var createWriter = func(BatchRPC channel, string? instanceName, string name, Array args, boolean createWrapper) {

    var varDefs = [];
    var writerArgs = '';

    // compose function arguments

    if (instanceName != null) {
        writerArgs += ', instanceId';
    }

    for (var index = 0; index < args.length; index++) {
        writerArgs += ', arg' + index;
    }

    // prefix instanced functions

    if (instanceName != null) {
        name = instanceName + '$' + name;
    }

    // function body

    var source = '(function(channel' + writerArgs;
    source += ') {\n';

    // localize some fields

    varDefs.push('iWriteArray = channel.iWriteArray');

    if (uses(channel.P_FLOAT, args)) {
        varDefs.push('fWriteArray = channel.fWriteArray');
    }

    varDefs.push('writePosition = channel.writePosition');

    source += '    var ' + varDefs.join(',\n        ') + ';\n\n';

    // command and instance id

    source += '    iWriteArray[writePosition++] = ' + channel._cmdToId[name] + ',\n';

    // write strings first

    for (var index = 0; index < args.length; index++) {

        if (args[index] == channel.P_STR) {
            source += '    writePosition = writeString(channel, writePosition, String(arg' + index + ')),\n';
        }
    }

    // write instance id

    if (instanceName != null) {
        source += '    iWriteArray[writePosition++] = instanceId,\n';
    }

    // write other types

    for (var index = 0; index < args.length; index++) {

        if (args[index] == channel.P_INT) {
            source += '    iWriteArray[writePosition++] = arg' + index + ',\n';
        } else if (args[index] == channel.P_FLOAT) {
            source += '    fWriteArray[writePosition++] = arg' + index + ',\n';
        }
    }

    source += '\n    channel.writePosition = writePosition,';
    source += '\n    ++iWriteArray[0];';
    source += '\n});';
    source += '\n' + getSourceUrl('writer', channel.constructor, name);

    channel.writeChannel[name] = eval(source);

    // optionally also create wrapper function

    if (createWrapper && instanceName == null && (name in channel) == false) {

        source = '(function(';

        for (var index = 0; index < args.length; index++) {
            if (index > 0) {
                source += ', arg' + index;
            } else {
                source += 'arg' + index;
            }
        }

        source += ') {\n';
        source += 'this.writeChannel.' + name + '(this' + writerArgs + ');\n';
        source += '});';
        source += '\n' + getSourceUrl('wrapper', channel.constructor, name);

        channel[name] = eval(source);
    }
};

/**
 * private: creates a function used to read a specific command from the channel
 *
 * @param BatchRPC channel
 * @param string instanceName
 * @param string name
 * @param Array args
 * @param boolean createWrapper
 * @param number nameId command id
 */
var createReader = func(BatchRPC channel, string? instanceName, string name, Array args, boolean createWrapper, number nameId) {

    var offset = 0;
    var varDefs = [ ];
    var localPosition = false;
    var directTargetCall = (createWrapper && (name in channel) == false);
    var source = '(function readChannel$' + name + '(channel' + (directTargetCall ? ', target' : '') + ') {\n';

    // only introduce local _f/iReadArray if floats/ints are used

    if (uses(channel.P_INT, args) || instanceName != null) {
        varDefs.push('iReadArray = channel.iReadArray');
        localPosition = true;
    }

    if (uses(channel.P_FLOAT, args)) {
        varDefs.push('fReadArray = channel.fReadArray');
        localPosition = true;
    }

    // read strings

    for (var index = 0; index < args.length; index++) {
        if (args[index] == channel.P_STR) {
            varDefs.push('str' + index + ' = readString(channel)');
        }
    }

    // channel position after reading strings

    if (localPosition) {
        varDefs.push('readPosition = channel.readPosition');
    }

    // read instance id (if any)

    if (instanceName != null) {
        varDefs.push('instanceId = iReadArray[' + (localPosition ? '' : 'channel.') + 'readPosition++]');
    }

    // concat var defs

    if (varDefs.length > 0) {
        source += '    var ' + varDefs.join(',\n        ') + ';\n';
    }

    source += '\n';

    // for instanced calls, add instance id parameter and prefix command with instanceName

    if (instanceName == null) {
        if (directTargetCall) {
            source += '    // direct mode, calling ' + channel.constructor.name + '::targetInstance.' + name + '()\n\n';
            source += '    target.' + name + '(\n';
        } else {
            source += '    // wrapper mode, calling ' + channel.constructor.name + '.' + name + '()\n\n';
            source += '    channel.' + name + '(\n';
        }
    } else {
        source += '    // instanced mode, calling ' + channel.constructor.name + ':' + ':' + instanceName + '[<instanceId>].' + name + '()\n\n';
        source += '    channel.' + instanceName + '[instanceId].' + name + '(\n';
    }

    // read other parameters, also handle read strings

    for (var index = 0; index < args.length; index++) {

        assert([ channel.P_INT, channel.P_FLOAT, channel.P_STR ].indexOf(args[index]) > -1);

        if (args[index] == channel.P_INT) {
            source += '      iReadArray[' + (offset > 0 ? '++' : '') + 'readPosition]';
            offset++;
        } else if (args[index] == channel.P_FLOAT) {
            source += '      fReadArray[' + (offset > 0 ? '++' : '') + 'readPosition]';
            offset++;
        } else if (args[index] == channel.P_STR) {
            source += '      str' + index;
        }

        if (index < args.length -1) {
            source += ',\n';
        }
    }

    // prefix readchannel function name with instanceName

    name = (instanceName != null ? instanceName + '$' : '') + name;

    source += '\n    );\n';

    if (offset > 0 || instanceName != null) {
        source += '\n    channel.readPosition = ' + (offset > 0 ? '++' : '') + 'readPosition;\n';
    }

    source += '});';
    source += '\n' + getSourceUrl('reader', channel.constructor, name);

    channel.readChannel[nameId] = eval(source);
};

/**
 * private: writes a string to the buffer and advances current position behind string
 *
 * @param String str string to write
 * @param integer pos write position
 * @return integer new channel position
 */
var writeString = func(channel, pos, str) {

    var strLen = str.length;
    //var pos = channel.writePosition;
    var iWriteArray = channel.iWriteArray;

    // save length as first value

    iWriteArray[pos++] = strLen;

    // copy string to buffer

    for (var i = 0; i < strLen; i++) {
        iWriteArray[pos++] = str.charCodeAt(i);
    }

    //channel.writePosition = pos;
    return pos;
};

/**
 * private: reads a string from the buffer and advances current position behind string
 *
 * @return String read string
 */
var readString = func(channel) {

    var pos = channel.readPosition;
    var iReadArray = channel.iReadArray;

    // first value read is the string length

    var strLen = iReadArray[pos++];

    // copy buffer to string

    var chars = [];

    for (var i = 0; i < strLen; i++) {
        chars.push(iReadArray[pos++]);
    }

    channel.readPosition = pos;

    return String.fromCharCode.apply(null, chars);
};

//!todo suppress "not used" notice
readString && writeString;